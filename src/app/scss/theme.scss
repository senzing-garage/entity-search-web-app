@use '@angular/material' as mat;
@import "variables";
@import "mixins";

// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

$my-app-primary: mat.define-palette(mat.$amber-palette);
$my-app-accent:  mat.define-palette(mat.$blue-gray-palette, 500, 900, A100);
$my-app-warn:    mat.define-palette(mat.$deep-orange-palette);

$my-app-theme: mat.define-light-theme($my-app-primary, $my-app-accent, $my-app-warn);

// --------------------- ANGULAR MATERIAL THEME
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/

$sz-mat-colors: (
  PRIMARY: #0C9BF4,
  SECONDARY: #0C9BF4,
  WARNING: #D30B0F,
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: rgba(black, 0.87),
    400: rgba(black, 0.87),
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: rgba(black, 0.87),
    A200: white,
    A400: white,
    A700: white,
  )
);

// $default: 500, $lighter: 100, $darker: 700, $text: $default
$sz-mat-primary: mat.define-palette($sz-mat-colors, PRIMARY, PRIMARY, PRIMARY);
$sz-mat-accent:  mat.define-palette($sz-mat-colors, SECONDARY, SECONDARY, SECONDARY);
// The warn palette is optional (defaults to red).
$sz-mat-warn:    mat.define-palette($sz-mat-colors, WARNING, WARNING, WARNING);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as `color` or `typography`.
$sz-mat-theme: mat.define-light-theme((
  color: (
    primary: $sz-mat-primary,
    accent: $sz-mat-accent,
    warn: $sz-mat-warn,  
  )
));

@include mat.all-legacy-component-themes($sz-mat-theme);