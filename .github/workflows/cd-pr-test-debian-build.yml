name: Pull Request Test Entity Search Web App Build on Debian

on:
  push:
    branches: [ $default-branch, main ]
  pull_request:
    branches: [ $default-branch, main ]

jobs:
  prBuildEntitySearchWebApp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Capture environment variables
        run: printenv
      - name: Check if there are conflicts when local merging main
        id: local_merge_main
        run: git merge origin/main
      - name: Build Entity Search Web App
        id: build_entity_search_web_app
        run: |
          make \
            BASE_IMAGE="node:12.2.0" \
            docker-build

  prTestEntitySearchWebApp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build:docker --if-present
    - run: npm run test:headless
#    - run: npm run e2e:headless

#  logPrBuildEntitySearchWebApp:
#    needs: [prBuildEntitySearchWebApp, prTestEntitySearchWebApp]
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set Variables With Build Info
#        id: job_info
#        run: |
#          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o job_info.json https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/jobs
#          echo ::set-output name=log_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .url')
#          echo ::set-output name=html_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .html_url')
#          echo ::set-output name=status::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .conclusion')
#          echo ::set-output name=branch_name::$(echo ${GITHUB_REF##*/})
#      - name: Generate log file
#        run: curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o build_logs.txt ${{ steps.job_info.outputs.log_url }}/logs
#      - name: Slack Notification
#        id: slack_notification
#        uses: senzing-factory/git-action-slack-notification@1.0.0
#        if: contains(steps.job_info.outputs.status, 'failure')
#        env:
#          SLACK_CHANNEL: production-build-failures
#          SLACK_COLOR: '#3278BD'
#          SLACK_TITLE: Entity Search Web App failed to build on commit sha ${{ github.sha }}
#          SLACK_MESSAGE: |
#            OS: node:12.2.0
#            Branch Name: ${{ steps.job_info.outputs.branch_name }}
#            The commit SHA is: ${{ github.sha }}
#            Git Actions Log URL: ${{ steps.job_info.outputs.html_url }}
#          SLACK_USERNAME: entity-search-web-app
#          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATION }}
#          GITHUB_ACTOR: ${{ github.actor }}
#          GITHUB_REPOSITORY: ${{ github.repository }}
#          GITHUB_REF: ${{ github.ref }}
#          GITHUB_ACTION: ${{ github.action }}
#          GITHUB_EVENT_NAME: ${{ github.event_name }}
#          GITHUB_WORKFLOW: ${{ github.workflow }}
#      - name: Persisting log
#        id: persisting_log
#        if: always()
#        uses: actions/upload-artifact@v1
#        with:
#          name: workflow_log
#          path: build_logs.txt
